/**
 * SIGEIT-API
 * The SIGEIT-APIdescription
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpResponse,
} from '@angular/common/http';
import {
  Inject,
  Injectable,
  Optional,
} from '@angular/core';

import { Observable } from 'rxjs';

import { Configuration } from '../configuration';
import { CreateScheduleDto } from '../model/createScheduleDto';
import { ResponseScheduleDto } from '../model/responseScheduleDto';
import { UpdateScheduleDto } from '../model/updateScheduleDto';
import { BASE_PATH } from '../variables';

@Injectable()
export class ScheduleService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleControllerCreate(body: CreateScheduleDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseScheduleDto>;
    public scheduleControllerCreate(body: CreateScheduleDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseScheduleDto>>;
    public scheduleControllerCreate(body: CreateScheduleDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseScheduleDto>>;
    public scheduleControllerCreate(body: CreateScheduleDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling scheduleControllerCreate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseScheduleDto>('post',`${this.basePath}/schedule`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param periodId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleControllerFindAll(periodId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ResponseScheduleDto>>;
    public scheduleControllerFindAll(periodId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ResponseScheduleDto>>>;
    public scheduleControllerFindAll(periodId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ResponseScheduleDto>>>;
    public scheduleControllerFindAll(periodId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (periodId === null || periodId === undefined) {
            throw new Error('Required parameter periodId was null or undefined when calling scheduleControllerFindAll.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ResponseScheduleDto>>('get',`${this.basePath}/schedule/period/${encodeURIComponent(String(periodId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleControllerFindOne(id: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseScheduleDto>;
    public scheduleControllerFindOne(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseScheduleDto>>;
    public scheduleControllerFindOne(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseScheduleDto>>;
    public scheduleControllerFindOne(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling scheduleControllerFindOne.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseScheduleDto>('get',`${this.basePath}/schedule/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleControllerRemove(id: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseScheduleDto>;
    public scheduleControllerRemove(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseScheduleDto>>;
    public scheduleControllerRemove(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseScheduleDto>>;
    public scheduleControllerRemove(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling scheduleControllerRemove.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ResponseScheduleDto>('delete',`${this.basePath}/schedule/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public scheduleControllerUpdate(body: UpdateScheduleDto, id: number, observe?: 'body', reportProgress?: boolean): Observable<ResponseScheduleDto>;
    public scheduleControllerUpdate(body: UpdateScheduleDto, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseScheduleDto>>;
    public scheduleControllerUpdate(body: UpdateScheduleDto, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseScheduleDto>>;
    public scheduleControllerUpdate(body: UpdateScheduleDto, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling scheduleControllerUpdate.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling scheduleControllerUpdate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ResponseScheduleDto>('patch',`${this.basePath}/schedule/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
